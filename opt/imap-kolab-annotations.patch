Provides get/set ANNOTATIONS support to PHP. [Version: 5.3.1]
Upstream: http://hg.pardus.de/cgi-bin/hg.cgi/kolab/patches/php/summary
Updated for 5.3 by hoffie
Updated for 5.3.4 by olemarkus
See bug #43948 upstream for this

--- a/ext/imap/php_imap.c	2010-11-18 16:22:22.000000000 +0100
+++ b/ext/imap/php_imap.c	2010-12-08 22:02:55.000000000 +0100
@@ -165,6 +165,24 @@
 ZEND_END_ARG_INFO()
 #endif
 
+#if defined(HAVE_IMAP2005)
+ZEND_BEGIN_ARG_INFO_EX(arginfo_imap_setannotation, 0, 0, 5)
+	ZEND_ARG_INFO(0, stream_id)
+	ZEND_ARG_INFO(0, mailbox)
+	ZEND_ARG_INFO(0, entry)
+	ZEND_ARG_INFO(0, attr)
+	ZEND_ARG_INFO(0, value)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_imap_getannotation, 0, 0, 4)
+	ZEND_ARG_INFO(0, stream_id)
+	ZEND_ARG_INFO(0, mailbox)
+	ZEND_ARG_INFO(0, entry)
+	ZEND_ARG_INFO(0, attr)
+ZEND_END_ARG_INFO()
+
+#endif
+
 ZEND_BEGIN_ARG_INFO_EX(arginfo_imap_expunge, 0, 0, 1)
 	ZEND_ARG_INFO(0, stream_id)
 ZEND_END_ARG_INFO()
@@ -408,6 +426,11 @@
 	ZEND_ARG_INFO(0, options)
 ZEND_END_ARG_INFO()
 
+ZEND_BEGIN_ARG_INFO_EX(arginfo_imap_status_current, 0, 0, 2)
+	ZEND_ARG_INFO(0, stream_id)
+	ZEND_ARG_INFO(0, options)
+ZEND_END_ARG_INFO()
+
 ZEND_BEGIN_ARG_INFO_EX(arginfo_imap_bodystruct, 0, 0, 3)
 	ZEND_ARG_INFO(0, stream_id)
 	ZEND_ARG_INFO(0, msg_no)
@@ -507,6 +530,7 @@
 	PHP_FE(imap_binary,								arginfo_imap_binary)
 	PHP_FE(imap_utf8,								arginfo_imap_utf8)
 	PHP_FE(imap_status,								arginfo_imap_status)
+	PHP_FE(imap_status_current,						arginfo_imap_status_current)
 	PHP_FE(imap_mailboxmsginfo,						arginfo_imap_mailboxmsginfo)
 	PHP_FE(imap_setflag_full,						arginfo_imap_setflag_full)
 	PHP_FE(imap_clearflag_full,						arginfo_imap_clearflag_full)
@@ -538,6 +562,11 @@
 	PHP_FE(imap_getacl,								arginfo_imap_getacl)
 #endif
 
+#if defined(HAVE_IMAP2005)
+ 	PHP_FE(imap_setannotation,							arginfo_imap_setannotation)
+ 	PHP_FE(imap_getannotation,							arginfo_imap_getannotation)
+#endif
+
 	PHP_FE(imap_mail,								arginfo_imap_mail)
 
 	PHP_FALIAS(imap_header,			imap_headerinfo,	arginfo_imap_headerinfo)
@@ -798,6 +827,30 @@
 /* }}} */
 #endif
 
+#if defined(HAVE_IMAP2005)
+/* {{{ mail_getannotation
+ *
+ * Mail GET_ANNOTATION callback
+ * Called via the mail_parameter function in c-client:src/c-client/mail.c
+ */
+void mail_getannotation(MAILSTREAM *stream, ANNOTATION *alist)
+{
+	ANNOTATION_VALUES *cur;
+
+	TSRMLS_FETCH();
+
+	/* walk through the ANNOTATION_VALUES */
+	for (cur = alist->values; cur; cur = cur->next) {
+	    if (cur->value) {
+			add_assoc_stringl(IMAPG(imap_annotation_list), cur->attr, cur->value, strlen(cur->value), 1);
+		} else {
+			add_assoc_stringl(IMAPG(imap_annotation_list), cur->attr, "", 0, 1);
+		}
+	}
+}
+/* }}} */
+#endif
+ 
 /* {{{ PHP_GINIT_FUNCTION
  */
 static PHP_GINIT_FUNCTION(imap)
@@ -823,6 +876,7 @@
 #if defined(HAVE_IMAP2000) || defined(HAVE_IMAP2001)
 	imap_globals->quota_return = NIL;
 	imap_globals->imap_acl_list = NIL;
+	imap_globals->imap_annotation_list = NIL;
 #endif
 	imap_globals->gets_stream = NIL;
 }
@@ -1548,7 +1602,118 @@
 /* }}} */
 #endif /* HAVE_IMAP2000 || HAVE_IMAP2001 */
 
-/* {{{ proto bool imap_expunge(resource stream_id)
+
+#if defined(HAVE_IMAP2005)
+/* {{{ proto bool imap_setannotation(resource stream_id, string mailbox, string entry, string attr, string value)
+	Sets an annotation for a given mailbox */
+PHP_FUNCTION(imap_setannotation)
+{
+	zval **streamind, **mailbox, **entry, **attr, **value;
+	pils *imap_le_struct;
+	int mailbox_len, entry_len, attr_len, value_len;
+	long ret;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rssss", &streamind, &mailbox, &mailbox_len, &entry, &entry_len, &attr, &attr_len, &value, &value_len) == FAILURE) {
+		return;
+	}
+
+	ZEND_FETCH_RESOURCE(imap_le_struct, pils *, streamind, -1, "imap", le_imap);
+
+	// create annotation object
+	ANNOTATION *annotation = mail_newannotation();
+	if (!annotation) {
+		RETURN_FALSE;
+	}
+
+	annotation->values = mail_newannotationvalue();
+	if (!annotation->values) {
+		mail_free_annotation(&annotation);
+		RETURN_FALSE;
+	}
+
+	// fill in annotation values
+	annotation->mbox = Z_STRVAL_PP(mailbox);
+	annotation->entry = Z_STRVAL_PP(entry);
+	annotation->values->attr = Z_STRVAL_PP(attr);
+	annotation->values->value = Z_STRVAL_PP(value);
+
+	ret = imap_setannotation(imap_le_struct->imap_stream, annotation);
+                
+	// make sure mail_free_annotation doesn't free our variables
+	annotation->mbox = NULL;
+	annotation->entry = NULL;
+	annotation->values->attr = NULL;
+	annotation->values->value = NULL;
+	mail_free_annotation(&annotation);
+
+	RETURN_BOOL(ret);
+}
+/* }}} */
+
+/* {{{ proto array imap_getannotation(resource stream_id, string mailbox, string entry, string attr)
+	Gets the ACL for a given mailbox */
+PHP_FUNCTION(imap_getannotation)
+{
+	zval **streamind, **mailbox, **entry, **attr;
+	pils *imap_le_struct;
+	int mailbox_len, entry_len, attr_len;
+	long ret;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rsss", &streamind, &mailbox, &mailbox_len, &entry, &entry_len, &attr, &attr_len) == FAILURE) {
+		return;
+	}
+
+	ZEND_FETCH_RESOURCE(imap_le_struct, pils *, streamind, -1, "imap", le_imap);
+
+	/* initializing the special array for the return values */
+	if (array_init(return_value) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	// fillup calling parameters
+	STRINGLIST *entries = mail_newstringlist();
+	if (!entries) {
+		RETURN_FALSE;
+	}
+        
+	STRINGLIST *cur = entries;
+	cur->text.data = (unsigned char *)cpystr(Z_STRVAL_PP(entry));
+	cur->text.size = Z_STRLEN_PP(entry);
+	cur->next = NIL;
+        
+	STRINGLIST *attributes = mail_newstringlist();
+	cur = attributes;
+	cur->text.data = (unsigned char *)cpystr (Z_STRVAL_PP(attr));
+	cur->text.size = Z_STRLEN_PP(attr);
+	cur->next = NIL;
+
+	/* initializing the special array for the return values */
+	if (array_init(return_value) == FAILURE) {
+		mail_free_stringlist(&entries);
+		mail_free_stringlist(&attributes);
+		RETURN_FALSE;
+	}
+
+	IMAPG(imap_annotation_list) = return_value;
+        
+	/* set the callback for the GET_ANNOTATION function */
+	mail_parameters(NIL, SET_ANNOTATION, (void *) mail_getannotation);
+	ret = imap_getannotation(imap_le_struct->imap_stream, Z_STRVAL_PP(mailbox), entries, attributes);
+        
+	mail_free_stringlist(&entries);
+	mail_free_stringlist(&attributes);
+
+	if (!ret) {
+		zval_dtor(return_value);
+		RETURN_FALSE;
+	}
+       
+	IMAPG(imap_annotation_list) = NIL;
+}
+/* }}} */
+#endif /* HAVE_IMAP2005 */
+
+ /* {{{ proto bool imap_expunge(resource stream_id)
    Permanently delete all messages marked for deletion */
 PHP_FUNCTION(imap_expunge)
 {
@@ -3188,6 +3353,42 @@
 
 	RETURN_LONG(mail_msgno(imap_le_struct->imap_stream, msgno));
 }
+
+/* }}} */
+
+/* {{{ proto object imap_status_current(resource stream_id, int options)
+   Get (cached) status info from current mailbox */
+PHP_FUNCTION(imap_status_current)
+{
+ 	zval **streamind, **pflags;
+ 	pils *imap_le_struct;
+	long flags = 0L;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "rl", &streamind, &flags) == FAILURE) {
+		return;
+	}
+
+	ZEND_FETCH_RESOURCE(imap_le_struct, pils *, streamind, -1, "imap", le_imap);
+
+	flags = Z_LVAL_PP(pflags);
+
+	if (object_init(return_value) == FAILURE) {
+		RETURN_FALSE;
+	}
+
+	if (flags & SA_MESSAGES) {
+		add_property_long(return_value, "messages", imap_le_struct->imap_stream->nmsgs);
+	}
+	if (flags & SA_RECENT) {
+		add_property_long(return_value, "recent", imap_le_struct->imap_stream->recent);
+	}
+	if (flags & SA_UIDNEXT) {
+		add_property_long(return_value, "uidnext", imap_le_struct->imap_stream->uid_last+1);
+	}
+	if (flags & SA_UIDVALIDITY) {
+		add_property_long(return_value, "uidvalidity", imap_le_struct->imap_stream->uid_validity);
+	}
+}
 /* }}} */
 
 /* {{{ proto object imap_status(resource stream_id, string mailbox, int options)
